<?php
/**
 * @file
 * A module that helps implement Pardot in your Drupal CMS.
 **/
/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array
 **/
function pardot_help($path, $arg) {
	switch ($path) {
		case "admin/help#pardot":
			return '<p>'.  t("Displays links to nodes created on this date") .'</p>';
			break;
	}

}
/**
 * Implements hook_menu().
 */
function pardot_menu() {
	$items = array();

	$items['admin/config/content/pardot'] = array(
    'title' => 'Pardot',
    'description' => 'Configuration for Pardot module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pardot_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}
/**
 * Form function, called by drupal_get_form()
 * in current_posts_menu().
 */
function pardot_form($form, &$form_state) {
	$form['current_posts_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
	);

	return system_settings_form($form);
}
function pardot_contents() {
	//Get today's date.
	$today = getdate();
	//Calculate midnight a week ago.
	$start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
	//Get all posts from one week ago to the present.
	$end_time = time();

	//NEW LINE
	$max_num = variable_get('pardot_max', 3);

}
/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function pardot_form_validate($form, &$form_state){
	/*$max_num = $form_state['values']['current_posts_max'];
	 if (!is_numeric($max_num)){
	 form_set_error('current_posts_max', t('You must enter an integer for the maximum number of posts to display.'));
	 }
	 else if ($max_num <= 0){
	 form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
	 }*/
}
/**
 * Custom page callback function, declared in current_posts_menu().
 */
function _pardot_page() {
	/* $result = current_posts_contents('page');
	 //Array to contain items for the page to render.
	 $items = array();
	 //Iterate over the resultset and format as links.
	 foreach ($result as $node) {
	 $items[] = array(
	 'data' => l($node->title, 'node/' . $node->nid),
	 );*/
}
function pardot_page_alter(&$page) {
	global $user;

	$aid = variable_get('pardot_account', '');
	$cid = variable_get('pardot_campaign', '');
	

	// Get page status code for visibility filtering.
	$status = drupal_get_http_header('Status');
	$trackable_status_codes = array(
    '403 Forbidden',
    '404 Not Found',
	);

	// 1. Check if the Pardot account number has a value.
	// 4. Ignore pages visibility filter for 404 or 403 status codes.
	if (!empty($id) && (in_array($status, $trackable_status_codes))) {
		$script = <<<END
		<script type="text/javascript">
piAId = '$aid';
piCId = '$cid';
(function() {
function async_load(){
var s = document.createElement('script');
s.type = 'text/javascript';
s.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';
var c = document.getElementsByTagName('script')[0];
c.parentNode.insertBefore(s, c);
}
if(window.attachEvent) { window.attachEvent('onload', async_load); }
else { window.addEventListener('load', async_load, false); }
})();
</script>
END;

		drupal_add_js($script, array('scope' => $scope, 'type' => 'inline'));
	}
}
